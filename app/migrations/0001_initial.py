# Generated by Django 4.0.4 on 2022-04-27 05:21

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_by', models.CharField(blank=True, max_length=10, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.basemodel')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(choices=[('ADMIN', 'ADMIN'), ('VENDOR', 'VENDOR'), ('CUSTOMER', 'CUSTOMER')], default='VENDOR', max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('category', models.CharField(blank=True, max_length=10, null=True)),
                ('catering', models.CharField(blank=True, max_length=10, null=True)),
                ('max_capacity', models.CharField(blank=True, max_length=10, null=True)),
                ('number_of_events', models.CharField(blank=True, max_length=10, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DISABLE', 'DISABLE')], default='ACTIVE', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('app.basemodel', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.basemodel')),
                ('name', models.CharField(max_length=100)),
                ('mobile_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('description', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DISABLE', 'DISABLE')], default='ACTIVE', max_length=10)),
            ],
            bases=('app.basemodel',),
        ),
        migrations.CreateModel(
            name='Lookup',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.basemodel')),
                ('type', models.CharField(blank=True, choices=[('category', 'category'), ('catering', 'catering'), ('max_capacity', 'max_capacity'), ('number_of_events', 'number_of_events')], max_length=100, null=True)),
                ('value', models.CharField(blank=True, max_length=100, null=True)),
                ('numeric_value', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'app_lookup',
            },
            bases=('app.basemodel',),
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.basemodel')),
                ('url', models.CharField(max_length=255)),
                ('size', models.IntegerField(default=0)),
                ('userID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('app.basemodel',),
        ),
    ]
