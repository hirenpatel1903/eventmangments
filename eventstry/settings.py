"""
Django settings for eventstry project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import datetime
import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)


from pathlib import Path
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=env('SECRET_KEY')
EMAIL_BACKEND=env('EMAIL_BACKEND')
EMAIL_HOST=env('EMAIL_HOST')
EMAIL_USE_TLS=env('EMAIL_USE_TLS')
EMAIL_PORT=env('EMAIL_PORT')
EMAIL_HOST_USER=env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=env('EMAIL_HOST_PASSWORD')
URL=env('BASE_URL')
WHATSAPP_URL=env('WHATSAPP_URL')
WHATSAPP_MESSAGE=env('WHATSAPP_MESSAGE')
TERMS_OF_USE_URL=env('TERMS_OF_USE_URL')
PRIVACY_POLICY_URL=env('PRIVACY_POLICY_URL')
TWO_FA_SMS_URL=env('2FA_SMS_URL')
TWO_FA_SMS_API_KEY=env('2FA_SMS_API_KEY')
ENTSTY=env('ENTSTY')

TWO_FA_SMS_SERVICES_NAME='ADDON_SERVICES'
TWO_FA_SMS_BALANCE='SEND'
TWO_FA_TRANSACTIONAL_SMS='TSMS'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG=env('DEBUG')

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [env('BASE_URL')]

LOGIN_REDIRECT_URL = 'dashboard'

managed = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'eventstry',
]

LOGGING_BK = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": "INFO", "handlers": ["file"]},
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": "logs/django-{}.log".format(str(datetime.date.today())),
            "formatter": "app",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True
        },
    },
    "formatters": {
        "app": {
            "format": (
                u"%(asctime)s [%(levelname)-8s] "
                "(%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
}

AUTH_USER_MODEL = 'app.User'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eventstry.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



TOKEN_VERIFY_BY_USER_EMAIL="1"
WSGI_APPLICATION = 'eventstry.wsgi.application'
DATE_INPUT_FORMATS = ['%d-%m-%Y']
TIME_INPUT_FORMATS = ['%I:%M %p']


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if env('DB') == 'MYSQL':
    DATABASES = {
        'default': {
            'ENGINE': env('DB_ENGINE'),
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT'),
            'OPTIONS': {
                'sql_mode': 'traditional',
            }
        }
    }
elif env('DB') == 'RDS':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('RDS_DB_NAME'),
            'USER': env('RDS_USERNAME'),
            'PASSWORD': env('RDS_PASSWORD'),
            'HOST': env('RDS_HOSTNAME'),
            'PORT': env('RDS_PORT'),
        }
    }
else:
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db/db.sqlite3',
            }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL =  '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]
# STATIC_ROOT = os.path.join(BASE_DIR,'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

PENDING_STATUS_ID = env('PENDING_STATUS_ID')
ACCEPTED_STATUS_ID = env('ACCEPTED_STATUS_ID')
REJECTED_STATUS_ID = env('REJECTED_STATUS_ID')
CLOSED_STATUS_ID = env('CLOSED_STATUS_ID')


DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'